// <auto-generated />
using System;
using EFCoreCinemaAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace EFCoreCinemaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702191610_InvoiceDataMigration")]
    partial class InvoiceDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CineRoomMovie", b =>
                {
                    b.Property<int>("CineRoomsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CineRoomsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CineRoomMovie");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Thomas Stanley Holland (Kingston upon Thames, Londres; 1 de junio de 1996), conocido simplemente como Tom Holland, es un actor, actor de voz y bailarín británico.",
                            DateOfBirth = new DateTime(1996, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom Holland"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Robert John Downey Jr. (Nueva York; 4 de abril de 1965) es un actor, productor y cantante estadounidense.",
                            DateOfBirth = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Robert Downey Jr."
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Scarlett Ingrid Johansson (Nueva York; 22 de noviembre de 1984) es una actriz, cantante y modelo estadounidense.",
                            DateOfBirth = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Christopher Robert Evans (Boston; 13 de junio de 1981) es un actor y director estadounidense.",
                            DateOfBirth = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris Evans"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Cine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Cines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-89.1858 13.7942)"),
                            Name = "Cinemax"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CineOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CineId")
                        .HasColumnType("int");

                    b.Property<int?>("CineId1")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CineId")
                        .IsUnique()
                        .HasFilter("[CineId] IS NOT NULL");

                    b.HasIndex("CineId1");

                    b.ToTable("CineOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CineId = 1,
                            DiscountPercentage = 10m,
                            EndDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CineProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CodeOfEthics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vision")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cines", (string)null);
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CineRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<int?>("CineRoomType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("CineId");

                    b.ToTable("CineRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CineId = 1,
                            CineRoomType = 1,
                            Currency = "$",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 2,
                            CineId = 1,
                            CineRoomType = 2,
                            Currency = "$",
                            Price = 12.99m
                        },
                        new
                        {
                            Id = 3,
                            CineId = 1,
                            CineRoomType = 3,
                            Currency = "$",
                            Price = 15.99m
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("IsDeleted = 'false'");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Animation"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            TransactionDate = new DateTime(2025, 7, 2, 13, 16, 9, 274, DateTimeKind.Local).AddTicks(749)
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            InvoiceId = 3,
                            Price = 15m,
                            Product = "Product C"
                        },
                        new
                        {
                            Id = 4,
                            InvoiceId = 3,
                            Price = 25m,
                            Product = "Product D"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Keyless.CineWithoutLocation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);

                    b.ToSqlQuery("SELECT Id, Name FROM Cines");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Keyless.Metric", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalActors")
                        .HasColumnType("int");

                    b.Property<int>("TotalCines")
                        .HasColumnType("int");

                    b.Property<int>("TotalGenres")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToSqlQuery("select Id, Title, \r\n                                                        (select count(*) from GenreMovie where MoviesId = Movies.Id) as TotalGenres,\r\n                                                        (select count(distinct CineId) from CineRoomMovie \r\n                                                        inner join CineRooms on CineRooms.Id = CineRoomMovie.CineRoomsId \r\n                                                        where MoviesId = Movies.Id) as TotalCines,\r\n                                                        (select count(*) from MoviesActors where MovieId = Movies.Id) as TotalActors from Movies");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmitterId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmitterId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hello Alice!",
                            EmitterId = 1,
                            ReceiverId = 2
                        },
                        new
                        {
                            Id = 2,
                            Content = "Hello Charlie!",
                            EmitterId = 2,
                            ReceiverId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "How are you?",
                            EmitterId = 1,
                            ReceiverId = 2
                        },
                        new
                        {
                            Id = 4,
                            Content = "I'm fine, thanks!",
                            EmitterId = 2,
                            ReceiverId = 1
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOnSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsOnSchedule = true,
                            PosterUrl = "https://example.com/posters/avengers-endgame.jpg",
                            ReleaseDate = new DateTime(2019, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Avengers: Endgame"
                        },
                        new
                        {
                            Id = 2,
                            IsOnSchedule = true,
                            PosterUrl = "https://example.com/posters/spiderman-no-way-home.jpg",
                            ReleaseDate = new DateTime(2021, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SpiderMan: No Way Home"
                        },
                        new
                        {
                            Id = 3,
                            IsOnSchedule = false,
                            PosterUrl = "https://example.com/posters/black-widow.jpg",
                            ReleaseDate = new DateTime(2021, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Black Widow"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MoviesActors");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 9.99m,
                            TransactionDate = new DateTime(2025, 7, 1, 13, 16, 9, 282, DateTimeKind.Local).AddTicks(5176),
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 19.99m,
                            TransactionDate = new DateTime(2025, 7, 2, 3, 16, 9, 282, DateTimeKind.Local).AddTicks(5195),
                            Type = 0
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Charlie"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alice"
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CardPay", b =>
                {
                    b.HasBaseType("EFCoreCinemaAPI.Models.Payment");

                    b.Property<string>("Digits")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Amount = 79.99m,
                            TransactionDate = new DateTime(2025, 6, 30, 13, 16, 9, 275, DateTimeKind.Local).AddTicks(9748),
                            Type = 1,
                            Digits = "1234"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 29.99m,
                            TransactionDate = new DateTime(2025, 7, 2, 10, 16, 9, 275, DateTimeKind.Local).AddTicks(9765),
                            Type = 1,
                            Digits = "5678"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.PaypalPay", b =>
                {
                    b.HasBaseType("EFCoreCinemaAPI.Models.Payment");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Amount = 99.99m,
                            TransactionDate = new DateTime(2025, 7, 1, 13, 16, 9, 282, DateTimeKind.Local).AddTicks(9237),
                            Type = 2,
                            Email = "leomarqz@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 49.99m,
                            TransactionDate = new DateTime(2025, 7, 2, 8, 16, 9, 282, DateTimeKind.Local).AddTicks(9245),
                            Type = 2,
                            Email = "leomarqz@gmail.com"
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Laptop", b =>
                {
                    b.HasBaseType("EFCoreCinemaAPI.Models.Product");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicsCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.ToTable("Laptops", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 799.99m,
                            Brand = "HP",
                            Model = "Pavilion 15",
                            Processor = "Intel Core i7",
                            RAM = 16,
                            ScreenSize = 0.0,
                            Storage = 512
                        });
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Merchandising", b =>
                {
                    b.HasBaseType("EFCoreCinemaAPI.Models.Product");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClothes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollectible")
                        .HasColumnType("bit");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.ToTable("Merchandising", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Cine T-Shirt",
                            Price = 19.99m,
                            IsAvailable = true,
                            IsClothes = false,
                            IsCollectible = true,
                            Volume = 0.5,
                            Weight = 0.20000000000000001
                        });
                });

            modelBuilder.Entity("CineRoomMovie", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.CineRoom", null)
                        .WithMany()
                        .HasForeignKey("CineRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCinemaAPI.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Actor", b =>
                {
                    b.OwnsOne("EFCoreCinemaAPI.Models.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("ActorId")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ActorId");

                            b1.ToTable("Actors");

                            b1.WithOwner()
                                .HasForeignKey("ActorId");
                        });

                    b.OwnsOne("EFCoreCinemaAPI.Models.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<int>("ActorId")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("ActorId");

                            b1.ToTable("Actors");

                            b1.WithOwner()
                                .HasForeignKey("ActorId");
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("HomeAddress");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Cine", b =>
                {
                    b.OwnsOne("EFCoreCinemaAPI.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CineId")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("CineId");

                            b1.ToTable("Cines");

                            b1.WithOwner()
                                .HasForeignKey("CineId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CineOffer", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Cine", null)
                        .WithOne("CineOffer")
                        .HasForeignKey("EFCoreCinemaAPI.Models.CineOffer", "CineId");

                    b.HasOne("EFCoreCinemaAPI.Models.Cine", "Cine")
                        .WithMany()
                        .HasForeignKey("CineId1");

                    b.Navigation("Cine");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CineProfile", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Cine", "Cine")
                        .WithOne("CineProfile")
                        .HasForeignKey("EFCoreCinemaAPI.Models.CineProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cine");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.CineRoom", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Cine", "Cine")
                        .WithMany("CineRooms")
                        .HasForeignKey("CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cine");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.InvoiceDetail", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Message", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.User", "Emitter")
                        .WithMany("SentMessages")
                        .HasForeignKey("EmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCinemaAPI.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emitter");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.MovieActor", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Actor", "Actor")
                        .WithMany("MoviesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCinemaAPI.Models.Movie", "Movie")
                        .WithMany("MoviesActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCinemaAPI.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Laptop", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("EFCoreCinemaAPI.Models.Laptop", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Merchandising", b =>
                {
                    b.HasOne("EFCoreCinemaAPI.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("EFCoreCinemaAPI.Models.Merchandising", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Actor", b =>
                {
                    b.Navigation("MoviesActors");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Cine", b =>
                {
                    b.Navigation("CineOffer");

                    b.Navigation("CineProfile");

                    b.Navigation("CineRooms");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.Movie", b =>
                {
                    b.Navigation("MoviesActors");
                });

            modelBuilder.Entity("EFCoreCinemaAPI.Models.User", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
